# -*- coding: utf-8 -*-
"""filtered_data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fPYqozGey2ksBBB21gR258FGTrUfsiK6
"""

import os
import pandas as pd
import numpy as np
import json
import time
import ast
from tqdm import tqdm

import torch
from datasets import load_dataset, load_metric
from transformers import AlbertForSequenceClassification, AutoTokenizer, TrainingArguments, Trainer

import matplotlib.pyplot as plt


dset_type="mnli"
modelname="roberta"  # "albert", "roberta"

dataset = load_dataset("glue",dset_type)
train_set = dataset["train"]
aum_dir="/media/felicia/Data/aum_results/aum/{}-aum".format(modelname)

filtered_idx_1=os.path.join(aum_dir,"filtered_index_1.txt")
with open(filtered_idx_1,"r") as f:
    content = f.read()
filtered_1=ast.literal_eval(content) # list of int

# content = content.split(',')
# content[0] = '2'
# content[-1] = '392699'
# filtered_1 = np.array(list(map(int, content)))


filtered_idx_2=os.path.join(aum_dir,"filtered_index_2.txt")
with open(filtered_idx_2,"r") as f:
    content = f.read()
filtered_2=ast.literal_eval(content)

# content = content.split(',')
# content[0] = '2'
# content[-1] = '392699'
# filtered_2 = np.array(list(map(int, content)))

# len(filtered_1), len(filtered_2)
#
# union_list = list(set.union(set(filtered_1), set(filtered_2)))
# len(union_list)

"""# Finding different threshold"""

with open(os.path.join(aum_dir,'flip_index_1.json')) as fp:
    flip_index_1 = json.load(fp)
with open(os.path.join(aum_dir,'flip_index_2.json')) as fp:
    flip_index_2 = json.load(fp)

aum_1 = torch.load(os.path.join(aum_dir,"aum_1_6.pt"), map_location=torch.device('cpu')).detach().numpy()
aum_2 = torch.load(os.path.join(aum_dir,"aum_2_6.pt"), map_location=torch.device('cpu')).detach().numpy()

# t = np.quantile(aum_1[flip_index_1], 0.99)


nf1 = list(set(range(len(train_set))) - set(flip_index_1))
nf2 = list(set(range(len(train_set))) - set(flip_index_2))

vis_dir="/media/felicia/Data/aum_results/vis"

plt.hist(aum_1[flip_index_1], alpha=0.5, bins=50)
plt.hist(aum_1[nf1], alpha=0.5, bins=50)
plt.savefig(os.path.join(vis_dir,"{}_{}_aum1.png".format(modelname,dset_type)))
plt.close()

plt.hist(aum_2[flip_index_2], alpha=0.5, bins=50)
plt.hist(aum_2[nf2], alpha=0.5, bins=50)
plt.savefig(os.path.join(vis_dir,"{}_{}_aum2.png".format(modelname,dset_type)))
plt.close()

# plt.hist(aum_1[filtered_data], bins=50)
# plt.show()
#
# sum(aum_1[filtered_data] > -1.18)
#
# plt.hist(aum_2[filtered_data], bins=50)
# plt.show()

def filter_data(threshold = 0.99):
    t1 = np.quantile(aum_1[flip_index_1], threshold)
    t2 = np.quantile(aum_2[flip_index_2], threshold)

    filter_list_1 = []
    filter_list_2 = []

    for i in tqdm(range(len(aum_1))):
        if aum_1[i] < t1:
            if i in flip_index_1:
                pass
            else:
                filter_list_1.append(i)

        if aum_2[i] < t2:
            if i in flip_index_2:
                pass
            else:
                filter_list_2.append(i)
        #if aum_1[i] < t1 and aum_2[i] < t2:
            #filter_list.append(i)
    
    # union_list = np.unique(filter_list) #
    union_list = list(set().union(filter_list_1,filter_list_2))
    intersection_list=list(set(filter_list_1).intersection(filter_list_2))

    return t1,t2,union_list,intersection_list

# num_sample, filtered_data = filter_data(threshold = 0.01)
# len(filtered_data)

# plt.hist(aum_1[flip_index_1], bins=50)
# plt.show()



"""## Let see what examples have been filtered out"""

# start_index = 0
# end_index = 40
# for i in range(len(filtered_data)):
#     if i < start_index:
#         continue
#     if i == end_index:
#         break
#
#     idx = int(filtered_data[i])
#
#     print("This is example " + str(idx))
#     print(train_set[idx]["premise"])
#     print(train_set[idx]["hypothesis"])
#     print(train_set[idx]["label"])
#     print()

# human_filtered[85, 122, 128, 140, 149, 291, 320]

# remain_data = list(set(range(len(train_set))) - set(filtered_data))
# train_set = train_set[remain_data]


## try different thresholds
thresholds=[0.01,0.1,0.3,0.5,0.9,0.95,0.99]
aum_filter={}
aum_filter["flip"]={
    "flip_idx_1":flip_index_1,
    "flip_idx_2":flip_index_2
}
for t in tqdm(thresholds):
    t1,t2,union_list,intersection_list=filter_data(threshold=t)
    aum_filter[t]={
        "union":union_list,
        "intersection":intersection_list
    }
    print("Quantile {:.2f} :{} & {}, size:{} & {}".format(t,t1,t2,len(union_list),len(intersection_list)))

with open(os.path.join(aum_dir,"{}-{}_aum.json".format(modelname,dset_type)),"w") as f:
    json.dump(aum_filter,f)

"""
Albert-mnli:
Quantile 0.01 :-1.635062383413315 & -1.604478120803833, size:28258 & 8802
Quantile 0.10 :-1.3547188878059386 & -1.33175368309021, size:33765 & 10797
Quantile 0.30 :-1.1281735301017761 & -1.1160153269767763, size:38698 & 12627
Quantile 0.50 :-0.9465796947479248 & -0.9436807334423065, size:43089 & 14287
Quantile 0.90 :-0.3209262192249299 & -0.3572610884904862, size:60741 & 21090
Quantile 0.95 :-0.1463254064321523 & -0.19780051782727248, size:66823 & 23435
Quantile 0.99 :0.15513633698225066 & 0.0745430118590603, size:80018 & 28603


"""